//使用队列的方法，先进先出，每次都遍历第一个数值；
//参数名称：fileRoad：文件路径，fileType：要筛选的文件类。
//then（data）：data为筛选出来的文件列表信息
const fs = require("fs");
const  path=require("path");
// 查询某个目录下的子文件名
// road 路径名称
function getFileChildrenName(road) {
  return new Promise((resolve, reject) => {
    fs.readdir(road, (err, data) => {
      if (err) {
        reject(err);
      } else {
        resolve(data);
      }
    });
  });
}


async function getFileList(fileRoad, fileType) {
  var belongFile=fileRoad.split("\\").pop();
  var [fileList,newFileList] = [[],[]];
  var youNeed = new RegExp('\\'+fileType) //需要.文件格式
  // 使用队列的方式，先进先出，[文件路径，类型]
  fileList.push([fileRoad, belongFile]);
  //当文件列表，文件数长度大于0时
  while (fileList.length > 0) {
    //上层文件路径，文件所在目录
    var [upFileName, upFileType] = [fileList[0][0], fileList[0][1]];
    //不断遍历第一个文件，判断是否为文件夹；
    if (fs.lstatSync(upFileName).isDirectory()) {
      //  判断是否为文件
      //获得该文件夹路径，遍历该文件夹下的所有文件
      await getFileChildrenName(upFileName).then(data => {
        data.forEach(element => {
          //element是文件名
          //先获取最外层的.md文件
          if (youNeed.test(element)) {
            var stats = fs.statSync(`${upFileName}/${element}`); // 获得文件最新修改时间
            var title = element.split(".");
            var articl = title[0]; //文件名
            var fileroad = path.join(upFileName, element); // 文件夹路径
            //获得.md文件的文件名，文件路径，创建时间，类别，
            var info = [articl, fileroad, stats.mtime, upFileType];
            newFileList.push(info);
          } else {
            //不是.md文件就存在文件列表数组里
            var fileroad = path.join(upFileName, element); // 文件夹路径,存入文件夹路径，文件名
            fileList.push([fileroad, element]);
          }
        });
      });
    } else {
      // //先获取最外层的.md文件
      if (youNeed.test(fileList[0][0])) {
        var stats = fs.statSync(`${upFileName}`); // 获得文件最新修改时间
        var title = element.split(".");
        var articl = title[0];
        //获得.md文件的文件名，文件路径，创建时间，类别，
        var info = [articl, fileroad, stats.mtime, belongFile];
        newFileList.push(info);
      }
    }
    //对第一个数值操作后，删除第一个数值；
    fileList.shift();
  }
  //当fileList为【】时，得到所需要的文件列表信息；
  return newFileList;
}

function  getFile (fileRoad, fileType) {
    return new Promise((resolve, reject) => {
      getFileList(fileRoad, fileType).then(data => {
        resolve(data);
      });
    });
  }
module.exports=getFile;

//参数名称：输入文件路径，要筛选的文件类型。
//then方法返回得到的文件名，路径
// getFileList(articleRoad, ".md").then(data => {
//     console.log(data);
// });

// export default getFileList(fileRoad, fileType);
